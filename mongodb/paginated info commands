import asyncio
import discord
from discord.ext import commands
import os

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
os.chdir(" ")

client = commands.Bot(command_prefix='#', intents=intents)
page1 = discord.Embed(title="crystals || common", description="⋆⛧┈┈┈┈﹤୨♡୧﹥ ┈┈┈┈*⛧⋆", colour=discord.Colour.blue())
for item in common_crystals:
    emoji = item["emoji"]
    name = item["name"]
    pl = item["planet"]

    page1.add_field(name=emoji + " " + name, value=f"found on: {pl}", inline=False)

page2 = discord.Embed(title="crystals || uncommon ", description="⋆⛧┈┈┈┈﹤୨♡୧﹥ ┈┈┈┈*⛧⋆", colour=discord.Colour.green())
for item in uncommon_crystals:
    emoji = item["emoji"]
    name = item["name"]
    pl = item["planet"]

    page2.add_field(name=emoji + " " + name, value=f"found on: {pl}", inline=False)

page3 = discord.Embed(title="crystals || rare", description="⋆⛧┈┈┈┈﹤୨♡୧﹥ ┈┈┈┈*⛧⋆", colour=discord.Colour.dark_blue())
for item in rare_crystals:
    emoji = item["emoji"]
    name = item["name"]
    pl = item["planet"]

    page3.add_field(name=emoji + " " + name, value=f"found on: {pl}", inline=False)

page_1 = discord.Embed(title="planets || solar system", description="⋆⛧┈┈┈┈﹤୨♡୧﹥ ┈┈┈┈*⛧⋆", colour=discord.Colour.dark_red())
for item in solar_planet_file:
    emoji = item["emoji"]
    name = item["name"]
    mi = item["mining info"]
    desc = item["description"]
    clas = item["classification"]

    page_1.add_field(name=emoji + " "+ name, value=f"{desc} | {clas} | {mi} ", inline=False)

page_2 = discord.Embed(title="planets || <insert system>", description="⋆⛧┈┈┈┈﹤୨♡୧﹥ ┈┈┈┈*⛧⋆", colour=discord.Colour.dark_blue())

client.help_pages = [page1, page2, page3]

client.help_pages_2 = [page_1, page_2]


class Menus(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.Cog.listener()
    async def on_ready(self):
        print('dinkalaka')

    @client.command()
    async def info(self, ctx, s=None):

        if s == None:
            em = discord.Embed(title="what do you need information on?", description="try =  planets, crystals etc.")
            await ctx.send(embed=em)
            return

        buttons = [u"\u23EA", u"\u2B05", u"\u27A1", u"\u23E9"]  # skip to start, left, right, skip to end
        current = 0
        if s =="crystals":
            msg = await ctx.send(embed=client.help_pages[current])
        if s== "planets":
            msg = await ctx.send(embed=client.help_pages_2[current])

        for button in buttons:
            await msg.add_reaction(button)

        while True:
            try:
                reaction, user = await self.client.wait_for("reaction_add", check=lambda reaction,user: user == ctx.author and reaction.emoji in buttons,timeout=60.0)

            except asyncio.TimeoutError:
                return print("test")

            else:
                previous_page = current
                if reaction.emoji == u"\u23EA":
                    current = 0

                elif reaction.emoji == u"\u2B05":
                    if current > 0:
                        current -= 1

                elif reaction.emoji == u"\u27A1":
                    if s == "crystals":
                        if current < len(client.help_pages) - 1:
                            current += 1

                    if s == "planets":
                        if current < len(client.help_pages_2) - 1:
                            current += 1


                elif reaction.emoji == u"\u23E9":
                    if s=="crystals":
                        current = len(client.help_pages) - 1
                    if s=="planets":
                        current = len(client.help_pages_2) - 1

                for button in buttons:
                    await msg.remove_reaction(button, ctx.author)

                if current != previous_page:
                    if (s == "crystals"):
                        await msg.edit(embed=client.help_pages[current])
                    if (s=="planets"):
                        await msg.edit(embed=client.help_pages_2[current])



def setup(client):
    client.add_cog(Menus(client))
